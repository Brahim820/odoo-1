<?xml version="1.0" encoding="utf-8"?>
<odoo>

    <!-- Permite que la regla salarial base sea actualizada -->
    <function name="write" model="ir.model.data">
        <function name="search" model="ir.model.data">
            <value eval="[('module', '=', 'hr_payroll'), ('name', '=', 'hr_rule_basic')]"/>
        </function>
        <value eval="{'noupdate': False}" />
    </function>

    <!-- Ingresos -->
    <record id="hr_payroll.hr_rule_basic" model="hr.salary.rule">
        <field name="name">SUELDO (GASTO)</field>
        <field name="sequence" eval="1"/>
        <field name="code">BASE</field>
        <field name="analytic" eval="True" />
        <field name="category_id" ref="hr_payroll.BASIC"/>
        <field name="condition_select">python</field>
        <field name="condition_python">result = payslip.payroll_type.name == 'Mensual'</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
if contract.basic_wage and contract.wage != employee.company_id.basic_wage:
        contracts = contract.search([('basic_wage', '=', True)])
        if contracts:
            contracts.write({'wage': employee.company_id.basic_wage})
dias = 30
unpaid = 0

for line in payslip.worked_days_line_ids:
    if line.code == 'UNPAID':
        unpaid += line.number_of_days

if worked_days.WORK100:
    dias = worked_days.WORK100.number_of_days
sueldo = (contract.wage/30)*(dias - unpaid)
result = round(sueldo, 2)
        </field>
    </record>

    <record id="hr_rule_biweekly" model="hr.salary.rule">
        <field name="name">QUINCENA (GASTO)</field>
        <field name="sequence" eval="1"/>
        <field name="biweekly_deduction" eval="True" />
        <field name="code">ALWQ</field>
        <field name="category_id" ref="INGRESONOGRAVADO"/>
        <field name="condition_select">python</field>
        <field name="condition_python">result = payslip.payroll_type.name == 'Quincenal'</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
result = 50
        </field>
        <field name="register_id" ref="hr_payroll.contrib_register_employees"/>
    </record>

    <record id="hr_rule_gratificacion" model="hr.salary.rule">
        <field name="name">GRATIFICACIONES</field>
        <field name="sequence" eval="2"/>
        <field name="code">GRATI</field>
        <field name="category_id" ref="hr_payroll.ALW"/>
        <field name="condition_select">python</field>
        <field name="condition_python">result = payslip.payroll_type.name == 'Mensual' and (inputs.ALW or contract.gratificacion)</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
value = 0
if inputs.ALW:
    value = inputs.ALW.amount
elif contract.gratificacion:
    value = contract.gratificacion
result = round(value, 2)
        </field>
    </record>

    <record id="hr_rule_commissions" model="hr.salary.rule">
        <field name="name">COMISIONES</field>
        <field name="sequence" eval="2"/>
        <field name="code">COMI</field>
        <field name="analytic" eval="True" />
        <field name="category_id" ref="hr_salary_rule__category_inggrav"/>
        <field name="condition_select">python</field>
        <field name="condition_python">result = payslip.payroll_type.name == 'Mensual' and inputs.COMI</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
value = 0
if inputs.COMI:
    for line in payslip.input_line_ids:
        if line.code == 'COMI':
            value += line.amount
result = round(value, 2)
        </field>
    </record>


    <!-- HORAS EXTRAS -->
    <record id="hr_rule_he025" model="hr.salary.rule">
        <field name="name">HORAS JORNADA NOCTURNA (25%)</field>
        <field name="sequence" eval="2"/>
        <field name="code">HE025</field>
        <field name="analytic" eval="True" />
        <field name="category_id" ref="hr_salary_rule__category_inggrav"/>
        <field name="condition_select">python</field>
        <field name="condition_python">result = payslip.payroll_type.name == 'Mensual' and inputs.HE025</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
value = 0
if inputs.HE025:
    for line in payslip.input_line_ids:
        if line.code == 'HE025':
            value += line.amount
result = round(value, 2)
        </field>
    </record>

    <record id="hr_rule_he050" model="hr.salary.rule">
        <field name="name">HORAS SUPLEMENTARIAS (50%)</field>
        <field name="sequence" eval="2"/>
        <field name="code">HE050</field>
        <field name="analytic" eval="True" />
        <field name="category_id" ref="hr_salary_rule__category_inggrav"/>
        <field name="condition_select">python</field>
        <field name="condition_python">result = payslip.payroll_type.name == 'Mensual' and inputs.HE050</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
value = 0
if inputs.HE050:
    for line in payslip.input_line_ids:
        if line.code == 'HE050':
            value += line.amount
result = round(value, 2)
        </field>
    </record>

    <record id="hr_rule_he100" model="hr.salary.rule">
        <field name="name">HORAS EXTRAORDINARIAS (100%)</field>
        <field name="sequence" eval="2"/>
        <field name="code">HE100</field>
        <field name="analytic" eval="True" />
        <field name="category_id" ref="hr_salary_rule__category_inggrav"/>
        <field name="condition_select">python</field>
        <field name="condition_python">result = payslip.payroll_type.name == 'Mensual' and inputs.HE100</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
value = 0
if inputs.HE100:
    for line in payslip.input_line_ids:
        if line.code == 'HE100':
            value += line.amount
result = round(value, 2)
        </field>
    </record>

    <record id="hr_rule_inggrav" model="hr.salary.rule">
        <field name="name">INGRESOS IMPUTABLES</field>
        <field name="sequence" eval="2"/>
        <field name="code">INGGRAV</field>
        <field name="category_id" ref="hr_salary_rule__category_inggrav"/>
        <field name="condition_select">python</field>
        <field name="condition_python">result = result = payslip.payroll_type.name == 'Mensual' and inputs.INGGRAV</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
value = 0
if inputs.INGGRAV:
    for line in payslip.input_line_ids:
        if line.code == 'INGGRAV':
            value += line.amount
result = round(value, 2)
        </field>
    </record>

    <!-- Cobro de Fondos de Reserva en el Rol de Pagos -->
    <record id="hr_rule_reserve_funds" model="hr.salary.rule">
        <field name="name">FONDOS DE RESERVA</field>
		<field name="code">FRPAG</field>
		<field name="sequence" eval="3" />
		<field name="appears_on_payslip" eval="True" />
		<field name="condition_select">python</field>
		<field name="register_id" ref="hr_payroll.contrib_register_employees"/>
		<field name="amount_select">code</field>
		<field name="condition_python">result = payslip.payroll_type.name == 'Mensual' and utils.check_reserve_funds(contract, payslip) and contract.fondos_reserva_rol == True</field>
		<field name="amount_python_compute">
inggrav = categories.BASIC + categories.INGGRAV
fr = employee.company_id.porcentaje_fondos_reserva
work100 = 30
if worked_days.WORK100:
    work100 = worked_days.WORK100.number_of_days

value = utils.reserve_funds(contract, payslip, inggrav, work100, fr, 'default')
if inputs.FRPAG:
    for line in payslip.input_line_ids:
        if line.code == 'FRPAG':
            value = line.amount

result = round(value, 2)
        </field>
		<field name="category_id" ref="INGRESONOGRAVADO"/>
		<field name="quantity">1.0</field>
	</record>

    <!-- Cobro de décimos acumulados en rol-->
    <record id="hr_rule_13ing_accumulated_salary" model="hr.salary.rule">
        <field name="name">DECIMO TERCER SUELDO ACUMULADO</field>
        <field name="sequence" eval="20"/>
        <field name="appears_on_payslip" eval="True"/>
        <field name="code">DTACUM</field>
        <field name="category_id" ref="INGRESONOGRAVADO"/>
        <field name="condition_select">python</field>
        <field name="condition_python">
# El representante legal no recibe 13ro.
if contract.representante_legal:
    result = False
else:
    result = payslip.payroll_type.name == 'Mensual' and inputs.DTACUM</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
value = 0
if inputs.DTACUM:
    for line in payslip.input_line_ids:
        if line.code == 'DTACUM':
            value += line.amount

result = round(value, 2)
        </field>
        <field name="register_id" ref="hr_payroll.contrib_register_employees"/>
    </record>

    <record id="hr_rule_14ing_accumulated_salary" model="hr.salary.rule">
        <field name="name">DECIMO CUARTO SUELDO ACUMULADO</field>
        <field name="sequence" eval="20"/>
        <field name="appears_on_payslip" eval="True"/>
        <field name="code">DCACUM</field>
        <field name="category_id" ref="INGRESONOGRAVADO"/>
        <field name="condition_select">python</field>
        <field name="condition_python">
# El representante legal no recibe 13ro.
if contract.representante_legal:
    result = False
else:
    result = payslip.payroll_type.name == 'Mensual' and inputs.DCACUM</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
value = 0
if inputs.DCACUM:
    for line in payslip.input_line_ids:
        if line.code == 'DCACUM':
            value += line.amount

result = round(value, 2)
        </field>
        <field name="register_id" ref="hr_payroll.contrib_register_employees"/>
    </record>

    <!-- Cobro de décimos en rol-->
    <record id="hr_rule_13ing_salary" model="hr.salary.rule">
        <field name="name">DECIMO TERCERO</field>
        <field name="sequence" eval="20"/>
        <field name="appears_on_payslip" eval="True"/>
        <field name="code">13PAG</field>
        <field name="analytic" eval="True" />
        <field name="category_id" ref="INGRESONOGRAVADO"/>
        <field name="condition_select">python</field>
        <field name="condition_python">
# El representante legal no recibe 13ro.
if contract.representante_legal:
    result = False
else:
    result = payslip.payroll_type.name == 'Mensual' and contract.decimo_tercero_rol == True</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
valor = (categories.BASIC + categories.INGGRAV) / 12
result = round(valor, 2)
        </field>
        <field name="register_id" ref="hr_payroll.contrib_register_employees"/>
    </record>

    <record id="hr_rule_14ing_salary" model="hr.salary.rule">
        <field name="name">DECIMO CUARTO</field>
        <field name="sequence" eval="21"/>
        <field name="appears_on_payslip" eval="True"/>
        <field name="code">14PAG</field>
        <field name="analytic" eval="True" />
        <field name="category_id" ref="INGRESONOGRAVADO"/>
        <field name="condition_select">python</field>
		<field name="condition_python"># El representante legal no recibe 14to.
if contract.representante_legal:
    result = False
else:
    result = payslip.payroll_type.name == 'Mensual' and contract.decimo_cuarto_rol == True</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">
dias = 30
unpaid = 0

for line in payslip.worked_days_line_ids:
    if line.code == 'UNPAID':
        unpaid += line.number_of_days

if worked_days.WORK100:
    dias = worked_days.WORK100.number_of_days
valor = (employee.company_id.basic_wage/30)*(dias - unpaid) / 12
result = round(valor, 2)
        </field>
        <field name="register_id" ref="hr_payroll.contrib_register_employees"/>
    </record>

    <record id="hr_rule_utilidades" model="hr.salary.rule">
        <field name="name">PARTICIPACION DE UTILIDADES</field>
        <field name="sequence" eval="21" />
        <field name="appears_on_payslip" eval="True" />
        <field name="code">PTU</field>
        <field name="category_id" ref="hr_salary_rule__category_inggrav"/>
		<field name="condition_select">python</field>
        <field name="condition_python">result = payslip.payroll_type.name == 'Mensual' and inputs.PTU</field>
		<field name="amount_select">code</field>
		<field name="amount_python_compute">
value = 0
if inputs.PTU:
    for line in payslip.input_line_ids:
        if line.code == 'PTU':
            value += line.amount
result = round(value, 2)
        </field>
		<field name="note">Es el derecho de los trabajadores sobre el 15%, de la utilidades de la empresa, de este valor el 10% se reparte a todos los trabajadores y el 5% de acuerdo a las cargas familiares, de cada uno. la fecha máxima es el 15 de abril.</field>
        <field name="register_id" ref="hr_payroll.contrib_register_employees"/>
	</record>

    <!-- Rules - Net -->
    <!-- Permite actualizar la regla hr_rule_net -->
    <function name="write" model="ir.model.data">
        <function name="search" model="ir.model.data">
            <value eval="[('module', '=', 'hr_payroll'), ('name', '=', 'hr_rule_net')]"/>
        </function>
        <value eval="{'noupdate': False}" />
    </function>

    <record id="hr_payroll.hr_rule_net" model="hr.salary.rule">
        <field name="name">NETO A RECIBIR</field>
        <field name="sequence" eval="300"/>
        <field name="code">NET</field>
        <field name="category_id" ref="hr_payroll.NET"/>
        <field name="condition_select">none</field>
        <field name="amount_select">code</field>
        <field name="amount_python_compute">result = round(categories.BASIC + categories.ALW + categories.INGGRAV + categories.INGNOGRAV - categories.DED - categories.SUBIESS - categories.LOAN, 2)</field>
        <field name="register_id" ref="hr_payroll.contrib_register_employees"/>
    </record>

</odoo>
